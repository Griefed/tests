#!/usr/bin/env bash
# Start script generated by ServerPackCreator SPC_SERVERPACKCREATOR_VERSION_SPC.
# This script checks for the Minecraft and Forge JAR-}les, and if they are not found, they are downloaded and installed.
# If everything is in order, the server is started.

if ( (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
{
  Write-Host "Warning! Running with administrator-privileges is not recommended."
}

$MINECRAFT_VERSION="SPC_MINECRAFT_VERSION_SPC"
$MODLOADER="SPC_MODLOADER_SPC"
$MODLOADER_VERSION="SPC_MODLOADER_VERSION_SPC"
$ARGS="SPC_JAVA_ARGS_SPC"
$JAVA="SPC_JAVA_SPC"
$FABRIC_INSTALLER_VERSION="SPC_FABRIC_INSTALLER_VERSION_SPC"
$QUILT_INSTALLER_VERSION="SPC_QUILT_INSTALLER_VERSION_SPC"
$MINECRAFT_SERVER_URL="SPC_MINECRAFT_SERVER_URL_SPC"

$FORGE_INSTALLER_URL="https://}les.minecraftforge.net/maven/net/minecraftforge/forge/$MINECRAFT_VERSION-$MODLOADER_VERSION/forge-$MINECRAFT_VERSION-$MODLOADER_VERSION-installer.jar"
$FABRIC_INSTALLER_URL="https://maven.fabricmc.net/net/fabricmc/fabric-installer/$FABRIC_INSTALLER_VERSION/fabric-installer-$FABRIC_INSTALLER_VERSION.jar"
$QUILT_INSTALLER_URL="https://maven.quiltmc.org/repository/release/org/quiltmc/quilt-installer/$QUILT_INSTALLER_VERSION/quilt-installer-$QUILT_INSTALLER_VERSION.jar"
$IMPROVED_FABRIC_LAUNCHER_URL="https://meta.fabricmc.net/v2/versions/loader/$MINECRAFT_VERSION/$MODLOADER_VERSION/$FABRIC_INSTALLER_VERSION/server/jar"
$IMPROVED_FABRIC_LAUNCHER_AVAILABLE = [int][System.Net.WebRequest]::Create($IMPROVED_FABRIC_LAUNCHER_URL).GetResponse().StatusCode

# Variables with do_not_manually_edit are set automatically during script execution,
# so manually editing them will have no effect, as they will be overridden.
$FORGE_LOCATION="do_not_manually_edit"
$MINECRAFT_SERVER_JAR="do_not_manually_edit"
$LAUNCHER_JAR="do_not_manually_edit"
$COMMAND="do_not_manually_edit"

function Crash {
  Write-Host "Exiting..."
  read -n 1 -s -r -p "Press any key to continue"
  exit 1
}

# $1 = Filename to check for
# $2 = Filename to save download as
# $3 = URL to download $2 from
# true if the }le was successfully downloaded, false if it already exists
function downloadIfNotExists {
  param ($FileToCheck, $FileToDownload, $DownloadURL)

  if (!(Test-Path -Path $FileToCheck -PathType Leaf)) {

    Write-Host "$FileToCheck could not be found."
    Write-Host "Downloading $FileToDownload"
    Write-Host "from $DownloadURL"

    (New-Object Net.WebClient).DownloadFile($DownloadURL, $FileToDownload)

    if (Test-Path -Path $FileToDownload -PathType Leaf) {
      Write-Host "Download complete."
      return $true
    }

  } else {
    Write-Host "$FileToCheck present."
    return $false
  }

}

# If modloader = Forge, run Forge-speci}c checks
function setup_forge {
"Running Forge checks and setup..."

IFS="." read -ra MINOR <<<"${MINECRAFT_VERSION}"

if ( ${MINOR[1]} -le 16 ) {

FORGE_LOCATION = "forge.jar"
LAUNCHER_JAR = "forge.jar"
MINECRAFT_SERVER_JAR = "minecraft_server.${MINECRAFT_VERSION
}.jar"
COMMAND = "-Dlog4j2.formatMsgNoLookups=true ${ARGS
} -jar ${LAUNCHER_JAR
} nogui"

} else {

FORGE_LOCATION = "libraries/net/minecraftforge/forge/${MINECRAFT_VERSION
}-${MODLOADER_VERSION
}/forge-${MINECRAFT_VERSION
}-${MODLOADER_VERSION
}-server.jar"
MINECRAFT_SERVER_JAR = "libraries/net/minecraft/server/${MINECRAFT_VERSION
}/server-${MINECRAFT_VERSION
}.jar"
COMMAND= "-Dlog4j2.formatMsgNoLookups=true @user_jvm_args.txt @libraries/net/minecraftforge/forge/${MINECRAFT_VERSION
}-${MODLOADER_VERSION
}/unix_args.txt nogui"

if ( ! -s "user_jvm_args.txt" ) {

{
"# Xmx and Xms set the maximum and minimum RAM usage, respectively."
"# They can take any number, followed by an M or a G."
"# M means Megabyte, G means Gigabyte."
"# For example, to set the maximum to 3GB: -Xmx3G"
"# To set the minimum to 2.5GB: -Xms2500M"
"# A good default for a modded server is 4GB."
"# Uncomment the next line to set it."
"# -Xmx4G"
"${ARGS

}"
} >>user_jvm_args.txt

} else {
"user_jvm_args.txt present..."
}

}

if ( $(downloadIfNotExist "${FORGE_LOCATION}" "forge-installer.jar" "${FORGE_INSTALLER_URL}") == "true" ) {

"Forge Installer downloaded. Installing..."
"$JAVA" -jar forge-installer.jar --installServer

if ( ${MINOR[1]
} -gt 16 ) {

rm -f run.bat
rm -f run.sh

} else {

"Renaming forge-${MINECRAFT_VERSION

}-${MODLOADER_VERSION

}.jar to forge.jar"
mv forge-"${MINECRAFT_VERSION

}"-"${MODLOADER_VERSION

}".jar forge.jar

}

if ( -s "${FORGE_LOCATION
}" ) {

rm -f forge-installer.jar
rm -f forge-installer.jar.log
"Installation complete. forge-installer.jar deleted."

} else {

rm -f forge-installer.jar
"Something went wrong during the server installation. Please try again in a couple of minutes and check your internet connection."
crash

}

}
}

# If modloader = Fabric, run Fabric-speci}c checks
function setup_fabric {
"Running Fabric checks and setup..."

if ( "$IMPROVED_FABRIC_LAUNCHER_AVAILABLE" == "200" ) {

"Improved Fabric Server Launcher available..."
"The improved launcher will be used to run this Fabric server."
LAUNCHER_JAR="fabric-server-launcher.jar"

downloadIfNotExist "fabric-server-launcher.jar" "fabric-server-launcher.jar" "${IMPROVED_FABRIC_LAUNCHER_URL}" >/dev/null

elseif (condition) {

} ( $(downloadIfNotExist "fabric-server-launch.jar" "fabric-installer.jar" "${FABRIC_INSTALLER_URL}") == "true" ) {

"Installer downloaded..."
LAUNCHER_JAR = "fabric-server-launch.jar"
MINECRAFT_SERVER_JAR = "server.jar"
"$JAVA" -jar fabric-installer.jar server -mcversion "${MINECRAFT_VERSION
}" -loader "${MODLOADER_VERSION
}" -downloadMinecraft

if ( -s "fabric-server-launch.jar" ) {

rm -rf .fabric-installer
rm -f fabric-installer.jar
"Installation complete. fabric-installer.jar deleted."

} else {

rm -f fabric-installer.jar
"fabric-server-launch.jar not found. Maybe the Fabric servers are having trouble."
"Please try again in a couple of minutes and check your internet connection."
crash

}

} else {

"fabric-server-launch.jar present. Moving on..."
LAUNCHER_JAR = "fabric-server-launcher.jar"
MINECRAFT_SERVER_JAR = "server.jar"

}

COMMAND="-Dlog4j2.formatMsgNoLookups=true ${ARGS} -jar ${LAUNCHER_JAR} nogui"
}

# If modloader = Quilt, run Quilt-speci}c checks
function setup_quilt {
"Running Quilt checks and setup..."

if ( $(downloadIfNotExist "quilt-server-launch.jar" "quilt-installer.jar" "${QUILT_INSTALLER_URL}") == "true" ) {

"Installer downloaded. Installing..."
"$JAVA" -jar quilt-installer.jar install server "${MINECRAFT_VERSION
}" --download-server --install-dir = .

if ( -s "quilt-server-launch.jar" ) {

rm quilt-installer.jar
"Installation complete. quilt-installer.jar deleted."

} else {

rm -f quilt-installer.jar
"quilt-server-launch.jar not found. Maybe the Quilt servers are having trouble."
"Please try again in a couple of minutes and check your internet connection."
crash

}

} else {
"quilt-server-launch.jar present. Moving on..."
}

LAUNCHER_JAR="quilt-server-launch.jar"
MINECRAFT_SERVER_JAR="server.jar"
COMMAND="-Dlog4j2.formatMsgNoLookups=true ${ARGS} -jar ${LAUNCHER_JAR} nogui"
}

# Check for a minecraft server and download it if necessary
function minecraft {
if ( "${MODLOADER}" == "Fabric" && "$IMPROVED_FABRIC_LAUNCHER_AVAILABLE" == "200" ) {

"Skipping Minecraft Server JAR checks because we are using the improved Fabric Server Launcher."

} else {

downloadIfNotExist "${MINECRAFT_SERVER_JAR
}" "${MINECRAFT_SERVER_JAR
}" "${MINECRAFT_SERVER_URL
}" > /dev/null

}
}

# Check for eula.txt and generate if necessary
function eula{
if ( ! -s "eula.txt" ) {

"Mojang's EULA has not yet been accepted. In order to run a Minecraft server, you must accept Mojang's EULA."
"Mojang's EULA is available to read at https://account.mojang.com/documents/minecraft_eula"
"If you agree to Mojang's EULA then type 'I agree'"
-n "Response: "
read -r ANSWER

if ( "${ANSWER
}" = = "I agree" ) {

"User agreed to Mojang's EULA."
"#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula)." >eula.txt
"eula=true" >>eula.txt

} else {

"User did not agree to Mojang's EULA."
"Entered: ${ANSWER
}"
crash

}

} else {
"eula.txt present. Moving on..."
}
}

# Main
if ( "${MODLOADER}" == "Forge" ) {

setup_forge

elseif (condition) {

} ( "${MODLOADER}" == "Fabric" ) {

setup_fabric

elseif (condition) {

} ( "${MODLOADER}" == "Quilt" ) {

setup_quilt

} else {

"Incorrect modloader specified."
crash

}

minecraft
eula

"Starting server..."
""
"Minecraft version: ${MINECRAFT_VERSION}"
"Modloader: ${MODLOADER}"
"Modloader version: ${MODLOADER_VERSION}"
"Java path: ${JAVA}"
"Java version:"
"${JAVA}" -version
"Launcher JAR: ${LAUNCHER_JAR}"
""
"Java args: ${ARGS}"
""
"Run Command: ${JAVA} ${COMMAND}"
""

${JAVA} ${COMMAND}

"Exiting..."
read -n 1 -s -r -p "Press any key to continue"
exit 0
